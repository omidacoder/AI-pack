# -*- coding: utf-8 -*-
"""cv-second.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QTL6tFW02y0qtYPI3HBbrSoaW-B7x4X3

### Reading Data With Keras
"""

#getting GPU Runtime
!nvidia-smi

import tensorflow as tf
import numpy as np
from keras.models import Sequential
from keras.layers import Dense, Conv2D, Flatten , Input , MaxPool2D
from keras.applications.vgg16 import VGG16
import matplotlib.pyplot as plt

# unpacking data
from google.colab import drive
drive.mount('/content/drive')
train_path='/content/drive/My Drive/cv second project/Training'
test_path='/content/drive/My Drive/cv second project/Test'
# reading train data with keras
train_dataset = tf.keras.utils.image_dataset_from_directory(
  train_path,
  label_mode='categorical',
  shuffle=False,
  image_size=(100,100),
  color_mode='rgb')
AUTOTUNE = tf.data.AUTOTUNE
train_dataset = train_dataset.prefetch(buffer_size=AUTOTUNE)
# reading test data with keras
test_dataset = tf.keras.utils.image_dataset_from_directory(
  test_path,
  label_mode='categorical',
  shuffle=False,
  image_size=(100,100),
  color_mode='rgb')
AUTOTUNE = tf.data.AUTOTUNE
test_dataset = test_dataset.prefetch(buffer_size=AUTOTUNE)

"""### Building Model Using Pre Trained CNN VGG16"""

#building keras model
# # reading vgg16 model
model = VGG16(weights='imagenet' , include_top=False , input_shape=(100,100,3))
# # freezing layers to add new layers later
for layer in model.layers:
  layer.trainable = False
# changing model
output = model.output
layer = tf.keras.layers.Flatten()(output)
layer = tf.keras.layers.Dense(units=81 , activation='softmax')(layer)
model = tf.keras.Model(
        inputs=model.input,
        outputs=layer,
    )
# compiling model
model.compile(loss=tf.keras.losses.CategoricalCrossentropy(from_logits=False) , optimizer="Adam" , metrics = ["accuracy"])
print(model.summary())
history = model.fit(train_dataset  , epochs=10 ,batch_size=32)

"""### Evaluating Model"""

# showing accuracies
plt.plot(history.history['accuracy'])
# plt.plot(history.history['val_acc'])
plt.title('model accuracy')
plt.ylabel('accuracy')
plt.xlabel('epoch')
plt.legend(['train'], loc='upper left')
plt.show()

# showing losses
plt.plot(history.history['loss'])
# plt.plot(history.history['val_loss'])
plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train', 'val'], loc='upper left')
plt.show()

model.evaluate(test_dataset)